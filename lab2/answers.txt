1. The instructions in the trace did not produce the correct mathematical
result, even though the correct result should have been able to fit in a 64 bit
signed integer, because there is code that stores the value 2 in the last 2 bits
of the return value of Ftimes. This is some sort of marker. In the trace we have
the line

547920  48 8d 04 ad 02 00 00 00 lea 0x2(,%rbp,4),%rax   rax=7fffffff73ab3b42

where we have that rbp=dfffffffdceaced0, which is the correct signed hex value
that results from the multiplication of 1250284240 and -1844255039. The code
assigns rax to be 4*rbp + 2, which is the same as shifting rbp to the left by 2
and changing the last two bits to be 10. This causes the highest two bits of the
correct mathematical result to be thrown away, and rax's leading bit becomes a
zero. At some point later in the code, the return value of Ftimes,
7fffffff73ab3b42, is shifted back to the right by 2. Using an arithmetic shift
inserts leading zeroes and results in the hex value 1fffffffdceaced0, which is
the decimal value 2305843008625102544. This is what gets output, and is the
wrong mathematical answer. Effectively, this is an overflow error.


2. The emacs -Q -batch -eval '(print most-negative-fixnum)' prints the most
negative integer that can be returned correctly using emacs lisp. Because of the
marker mentioned above, there are only 62 bits lisp can use to hold a signed
integer on a 64 bit machine. Thus in two's complement representation there will
be one sign bit and the most negative number will be -(2^61) which is the same
as -2305843009213693952.

3. emacs -Q -batch -eval '(print (* most-positive-fixnum most-positive-fixnum
most-positive-fixnum most-positive-fixnum))' outputs 1 because of the overflow
error previously mentioned. The maximum signed int value is 2^61-1. Thus the
command ouputs the result of (2^61-1)^4, which is the same as multiplying the
maximum signed int value by itself four times. In hex the maximum signed int
value is 0x1fff ffff ffff ffff, and squaring it results in the value 0x3ff ffff
ffff ffff c000 0000 0000 0001. This will overflow and be truncated to 62 bits,
which is 0x0000 0000 0000 0001. Then this is multiplied by the max signed int
twice more, which overflows again to get 0x0000 0000 0000 0001. Thus the
expression evaluates to 1.

4. In the case of multiplication, emacs lisp would work correctly because it
already implements wrapping when overflow occurs. There are no optimizations
that would cause undefined behaviour in regards to wrapping. The imul assembly
command already wraps, so doing -fwrapv would not change anything.

5.
